{"version":3,"sources":["components/Home/index.js","components/About/index.js","components/NotFound/index.js","views/HomePage/Page.js","core/utils.ts","core/apiCalls/getExample.js","views/HomePage/View.js","views/AboutPage/Page.js","views/AboutPage/View.js","components/App/routes.js","components/App/index.js","components/ContextProvider/context.js","components/ContextProvider/index.jsx","serviceWorker.js","index.js"],"names":["App","className","to","aboutUrl","About","baseUrl","NotFound","Page","props","Home","console","log","state","url","base","getExample","context","upc","uri","type","body","toLowerCase","axios","get","delete","post","headers","apiCall","id","then","res","setState","data","View","loader","handleUpdate","bind","this","key","value","change","React","Routes","exact","path","component","HomePage","AboutPage","Context","createContext","name","update","displayName","ContextProvider","updateGroup","Provider","children","Boolean","window","location","hostname","match","history","createBrowserHistory","listen","action","includes","scroll","behavior","top","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bd712623.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { aboutUrl } from '../App/routes';\n// import { Context } from '../ContextProvider/context';\nimport './scss/index.scss';\n\nfunction App() {\n  // const contextApi = <Context.Consumer>\n  //   {obj => {\n  //     return <>\n  //       <h2>{obj.name}</h2>\n  //       <button className=\"btn\" onClick={() => obj.update(\"Hello\")} >hi</button>\n  //     </>\n  //   }}\n  // </Context.Consumer>\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Home</h1>\n        <div>\n          <Link to={aboutUrl}>\n            about\n        </Link>\n        </div>\n        {/* {contextApi} */}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { baseUrl } from '../App/routes';\nimport './scss/index.scss';\n\nfunction About() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>About</h1>\n        <div>\n          <Link to={baseUrl}>\n            back\n          </Link>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default About;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { baseUrl } from '../App/routes';\nimport './scss/index.scss';\n\nfunction NotFound() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>NotFound</h1>\n        <div>\n          <Link to={baseUrl}>\n            back to Home\n          </Link>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default NotFound;\n","import React from 'react';\nimport { Home } from '../../components';\n\nconst Page = (props) => {\n    return (\n        <>\n            <Home />\n            {console.log(\"prop\",props.state)}\n        </>\n    );\n}\n\nexport default Page;\n","import axios from \"axios\";\nexport const url = {\n    base: \"https://jsonplaceholder.typicode.com\",\n}\nexport const generateProductUrl = (id: string) => {\n    return `/todos/${id}`;\n}\nexport function apiCall(uri: string, type = 'get', body?: any) {\n    if (type.toLowerCase() === 'get')\n        return axios.get(url.base + uri);\n    if (type.toLowerCase() === 'delete')\n        return axios.delete(url.base + uri);\n    if (type.toLowerCase() === 'post') {\n        var headers = {\n            'Content-Type': 'application/json',\n        }\n        return axios.post(url.base + uri, body, { headers: headers });\n    }\n\n}\n","import { apiCall, generateProductUrl } from \"../utils\";\nconst getExample = (context, upc) => {\n    return apiCall(generateProductUrl(upc)).then(res => {\n        context.setState({ res: res.data })\n    })\n}\nexport default getExample;","import * as React from \"react\";\nimport Page from \"./Page\";\nimport \"./scss/index.scss\";\nimport getExample from \"../../core/apiCalls/getExample\";\n\nclass View extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loader: false,\n            res: null\n        }\n        this.handleUpdate = this.handleUpdate.bind(this);\n    }\n    componentWillMount() {\n        getExample(this,'1')\n    }\n    \n    handleUpdate(key, value) {\n        var change = {};\n        change[key] = value;\n        this.setState(change)\n    }\n    render() {\n        return <div className=\"home-page\">\n            <Page state={this.state.res}/>\n        </div>\n    }\n}\n\nexport default View;\n","import React from 'react';\nimport { About } from '../../components';\n\nfunction Page() {\n    return (\n        <About />\n    );\n}\n\nexport default Page;\n","import * as React from \"react\";\nimport Page from \"./Page\";\nimport \"./scss/index.scss\";\n\nclass View extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loader: false\n        }\n        this.handleUpdate = this.handleUpdate.bind(this);\n    }\n    handleUpdate(key, value) {\n        var change = {};\n        change[key] = value;\n        this.setState(change)\n    }\n    render() {\n        return <div className=\"abou-page\">\n            <Page />\n        </div>\n    }\n}\n\nexport default View;\n","import * as React from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport { NotFound } from \"..\";\n\nimport { HomePage, AboutPage } from \"../../views\";\n\nexport const baseUrl = \"/\";\nexport const aboutUrl = \"/about\";\n\nexport default function Routes() {\n    return (\n        <BrowserRouter>\n            <Switch>\n                <Route exact path={baseUrl} component={HomePage} />\n                <Route exact path={aboutUrl} component={AboutPage} />\n                <Route component={NotFound} />\n            </Switch>\n        </BrowserRouter>\n    )\n}\n","import React from 'react';\nimport './scss/index.scss';\nimport Routes from './routes';\n\nfunction App() {\n  return (\n    <Routes />\n  );\n}\n\nexport default App;\n","import { createContext } from \"react\";\n\n/* tslint:disable:no-empty */\nexport const Context = createContext({\n  name: null,\n  update: (value) => {}\n});\n/* tslint:enable:no-empty */\n\nContext.displayName = \"Context\";\n","import * as React from \"react\";\nimport { Context } from \"./context\";\n\n\nexport default class ContextProvider extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      update: this.updateGroup,\n      name: \"Welcome\"\n    };\n  }\n  updateGroup = (value) => {\n    this.setState({\n      name: value\n    });\n  }\n\n  render() {\n    return (\n      <Context.Provider value={this.state}>\n        {this.props.children}\n      </Context.Provider>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport ContextProvider from './components/ContextProvider';\nimport * as serviceWorker from './serviceWorker';\nimport { Router } from \"react-router-dom\";\nimport { createBrowserHistory } from \"history\";\n\n\nexport const history = createBrowserHistory();\nhistory.listen((location, action) => {\n    if ([\"PUSH\"].includes(action)) {\n        window.scroll({\n            behavior: \"smooth\",\n            top: 0\n        });\n    }\n});\nReactDOM.render(\n    <Router history={history}>\n        <ContextProvider><App /></ContextProvider>\n    </Router>,\n    document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}